trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'
  project-name-dev: 'darshana-dev'
  project-name-uat: 'darshana-uat'
  image-repository-dev: 'imagestream-dev'
  image-repository-uat: 'imagestream-dev'
  development-cfg-dev: 'sample-dev'
  development-cfg-uat: 'sample-uat'
  container-name-dev: 'sample-dev'
  container-name-uat: 'sample-uat'

stages: 
- stage: Build
  displayName: Build
  jobs:
  - job: BuildJob
    steps: 

    - task: DownloadSecureFile@1
      name: caCertificate
      displayName: 'Download CA certificate'
      inputs:
        secureFile: 'tls.crt'
    - script: |
        echo Installing $(caCertificate.secureFilePath) to the trusted CA directory...
        sudo chown root:root $(caCertificate.secureFilePath)
        sudo chmod a+r $(caCertificate.secureFilePath)
        sudo ln -s -t /etc/ssl/certs/ $(caCertificate.secureFilePath)

    - task: Docker@2
      displayName: 'Docker build & Create Docker Image'
      inputs:
        containerRegistry: 'openshift-image-registry'
        repository: '$(project-name-dev)/$(image-repository-dev)'
        command: 'build'
        Dockerfile: 'openshiftapplication/Dockerfile'
        buildContext: '.'
        tags: '$(tag)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Test'
      inputs:
        command: test
        projects: 'openshiftapplicationtest/openshiftapplicationtest.csproj'
        publishTestResults: true
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'    
      
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: Docker@2
      displayName: 'Docker Push Image'
      inputs:
        containerRegistry: 'openshift-image-registry'
        repository: '$(project-name-dev)/$(image-repository-dev)'
        command: 'push'
        tags: '$(tag)'

- stage: DEV 
  displayName: Deploy DEV
  jobs:
  - job: Deploy
    displayName: Deploy-DEV-Job
    steps:
    
    - task: oc-setup@2
      displayName: Connect With OpenShift
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        

    - task: oc-cmd@2
      displayName: Select DEV project
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        cmd: 'oc project $(project-name-dev)'
        uselocalOc: true

    - task: oc-cmd@2
      displayName: Deploy Docker Image To DEV
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        cmd: 'oc set triggers dc/$(development-cfg-dev) --from-image=$(project-name-dev)/$(image-repository-dev):$(tag) -c $(container-name-dev)'
        uselocalOc: true

- stage: UAT 
  displayName: Deploy UAT
  jobs:
  - job: Deploy
    displayName: Deploy-UAT-Job
    steps:
    
    - task: oc-cmd@2
      displayName: Tag Docker Image
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        cmd: 'oc -n $(project-name-dev)  tag $(project-name-dev)/$(image-repository-dev):$(tag) $(project-name-uat)/$(image-repository-uat):$(tag)'
        uselocalOc: true

    - task: oc-cmd@2
      displayName: Select UAT project To UAT
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        cmd: 'oc project $(project-name-uat)'
        uselocalOc: true

    - task: oc-cmd@2
      displayName: 'Deploy To UAT'
      inputs:
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'openshift-cluster-connection'
        cmd: 'oc set triggers dc/$(development-cfg-uat) --from-image=$(project-name-uat)/$(image-repository-uat):$(tag) -c $(container-name-uat)'
        uselocalOc: true